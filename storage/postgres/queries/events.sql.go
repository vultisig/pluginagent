// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getEventsAfterTimestamp = `-- name: GetEventsAfterTimestamp :many
SELECT id, public_key, policy_id, event_type, event_data, created_at FROM system_events WHERE created_at >= $1
`

func (q *Queries) GetEventsAfterTimestamp(ctx context.Context, createdAt pgtype.Timestamp) ([]SystemEvent, error) {
	rows, err := q.db.Query(ctx, getEventsAfterTimestamp, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SystemEvent
	for rows.Next() {
		var i SystemEvent
		if err := rows.Scan(
			&i.ID,
			&i.PublicKey,
			&i.PolicyID,
			&i.EventType,
			&i.EventData,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO system_events (
    public_key,
    policy_id,
    event_type,
    event_data
) VALUES ($1, $2, $3, $4)
RETURNING id
`

type InsertEventParams struct {
	PublicKey pgtype.Text
	PolicyID  pgtype.UUID
	EventType SystemEventType
	EventData []byte
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertEvent,
		arg.PublicKey,
		arg.PolicyID,
		arg.EventType,
		arg.EventData,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
