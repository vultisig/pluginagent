// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: policy.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllPluginPolicies = `-- name: GetAllPluginPolicies :many
SELECT id, public_key, plugin_id, plugin_version, policy_version, signature, active, recipe
FROM plugin_policies
WHERE public_key = $1
  AND plugin_id = $2
  AND ($3::boolean = false OR active = true)
`

type GetAllPluginPoliciesParams struct {
	PublicKey string
	PluginID  string
	Column3   bool
}

type GetAllPluginPoliciesRow struct {
	ID            pgtype.UUID
	PublicKey     string
	PluginID      string
	PluginVersion string
	PolicyVersion string
	Signature     string
	Active        bool
	Recipe        string
}

func (q *Queries) GetAllPluginPolicies(ctx context.Context, arg GetAllPluginPoliciesParams) ([]GetAllPluginPoliciesRow, error) {
	rows, err := q.db.Query(ctx, getAllPluginPolicies, arg.PublicKey, arg.PluginID, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPluginPoliciesRow
	for rows.Next() {
		var i GetAllPluginPoliciesRow
		if err := rows.Scan(
			&i.ID,
			&i.PublicKey,
			&i.PluginID,
			&i.PluginVersion,
			&i.PolicyVersion,
			&i.Signature,
			&i.Active,
			&i.Recipe,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluginPolicy = `-- name: GetPluginPolicy :one
SELECT id, public_key, plugin_id, plugin_version, policy_version, signature, active, recipe
FROM plugin_policies 
WHERE id = $1
`

type GetPluginPolicyRow struct {
	ID            pgtype.UUID
	PublicKey     string
	PluginID      string
	PluginVersion string
	PolicyVersion string
	Signature     string
	Active        bool
	Recipe        string
}

func (q *Queries) GetPluginPolicy(ctx context.Context, id pgtype.UUID) (GetPluginPolicyRow, error) {
	row := q.db.QueryRow(ctx, getPluginPolicy, id)
	var i GetPluginPolicyRow
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PluginID,
		&i.PluginVersion,
		&i.PolicyVersion,
		&i.Signature,
		&i.Active,
		&i.Recipe,
	)
	return i, err
}

const insertPluginPolicy = `-- name: InsertPluginPolicy :one
INSERT INTO plugin_policies (
    id, public_key, plugin_id, plugin_version, policy_version, signature, active, recipe
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, public_key, plugin_id, plugin_version, policy_version, signature, active, recipe
`

type InsertPluginPolicyParams struct {
	ID            pgtype.UUID
	PublicKey     string
	PluginID      string
	PluginVersion string
	PolicyVersion string
	Signature     string
	Active        bool
	Recipe        string
}

type InsertPluginPolicyRow struct {
	ID            pgtype.UUID
	PublicKey     string
	PluginID      string
	PluginVersion string
	PolicyVersion string
	Signature     string
	Active        bool
	Recipe        string
}

func (q *Queries) InsertPluginPolicy(ctx context.Context, arg InsertPluginPolicyParams) (InsertPluginPolicyRow, error) {
	row := q.db.QueryRow(ctx, insertPluginPolicy,
		arg.ID,
		arg.PublicKey,
		arg.PluginID,
		arg.PluginVersion,
		arg.PolicyVersion,
		arg.Signature,
		arg.Active,
		arg.Recipe,
	)
	var i InsertPluginPolicyRow
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PluginID,
		&i.PluginVersion,
		&i.PolicyVersion,
		&i.Signature,
		&i.Active,
		&i.Recipe,
	)
	return i, err
}

const softDeletePluginPolicy = `-- name: SoftDeletePluginPolicy :exec
UPDATE plugin_policies
SET deleted = true
WHERE id = $1
`

func (q *Queries) SoftDeletePluginPolicy(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, softDeletePluginPolicy, id)
	return err
}

const updatePluginPolicy = `-- name: UpdatePluginPolicy :one
UPDATE plugin_policies 
SET plugin_version = $2,
    policy_version = $3,
    signature = $4,
    active = $5,
    recipe = $6
WHERE id = $1
RETURNING id, public_key, plugin_id, plugin_version, policy_version, signature, active, recipe
`

type UpdatePluginPolicyParams struct {
	ID            pgtype.UUID
	PluginVersion string
	PolicyVersion string
	Signature     string
	Active        bool
	Recipe        string
}

type UpdatePluginPolicyRow struct {
	ID            pgtype.UUID
	PublicKey     string
	PluginID      string
	PluginVersion string
	PolicyVersion string
	Signature     string
	Active        bool
	Recipe        string
}

func (q *Queries) UpdatePluginPolicy(ctx context.Context, arg UpdatePluginPolicyParams) (UpdatePluginPolicyRow, error) {
	row := q.db.QueryRow(ctx, updatePluginPolicy,
		arg.ID,
		arg.PluginVersion,
		arg.PolicyVersion,
		arg.Signature,
		arg.Active,
		arg.Recipe,
	)
	var i UpdatePluginPolicyRow
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PluginID,
		&i.PluginVersion,
		&i.PolicyVersion,
		&i.Signature,
		&i.Active,
		&i.Recipe,
	)
	return i, err
}
